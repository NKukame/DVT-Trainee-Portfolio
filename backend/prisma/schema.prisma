generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  CLIENT
}

enum EmployeeRole {
  DEVELOPER
  DESIGNER
  PROJECT_MANAGER
  TEAM_LEAD
  SENIOR_DEVELOPER
}

enum TechCategory {
  BACKEND
  FRONTEND
  DESIGN
  MOBILE
}

enum SoftSkillsCategory{
  COMMUNICATION
  COLLABORATION
  LEADERSHIP
  ADAPTABILITY
  PROBLEM_SOLVING
  TIME_MANAGEMENT
  
}


enum Department {
  ENGINEERING
  DESIGN
  MARKETING
  SALES
  HR
}

enum UserTitle{
  MR
  MRS
  MS
  DR
}

enum Industries{
  RETAIL
  BANKING
  INSURANCE
  EDUCATION
  MINING
  MECS
}




model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  role          UserRole  @default(USER)
  employeeId    String?   @unique
  employee      Employee? @relation(fields: [employeeId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Employee {
  id           String        @id @default(uuid())
  title        UserTitle
  name         String
  surname      String
  birthday     DateTime?
  photoUrl     String?
  bio          String
  role         EmployeeRole
  education    Education?
  department   Department
  company      String
  location     String?
  email        String
  phone        String?
  github       String?
  linkedIn     String?
  experience    String?
  portfolio    String?
  availability Availability?    
  techStack    EmployeeTechStack[]
  softSkills   EmployeeSoftSkill[]
  testimonials Testimonial[]
  user         User?
  projects     ProjectMember[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([email])
  @@index([department])
  @@index([role])
  @@index([company])
}

model Project {
  id          String        @id @default(uuid())
  name        String        @unique
  description String
  industries  ProjectIndustry[]
  techStack   ProjectTechStack[]
  github      String?
  demo        String?
  screenshot  String?
  members     ProjectMember[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([name])
  @@index([createdAt])
}

model ProjectMember {
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  role       EmployeeRole?
  joinedAt   DateTime @default(now())

  @@id([projectId, employeeId])
}

model Testimonial {
  id         String   @id @default(uuid())
  company       String
  quote      String
  reference  String
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Availability {
  id           String   @id @default(uuid())
  employeeId   String
  employee     Employee @relation(fields: [employeeId], references: [id])
  available    Boolean  @default(true)
  client       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([employeeId])
}

model TechStack {
  id   String @id @default(uuid())
  name String @unique
  category TechCategory
  employees EmployeeTechStack[]
  projects  ProjectTechStack[]
}

model SoftSkill {
  id   String @id @default(uuid())
  name String @unique
  employees EmployeeSoftSkill[]
}

model EmployeeTechStack {
  
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id])
  techStackId String
  techStack  TechStack @relation(fields: [techStackId], references: [id])
  years    String?

  @@id([employeeId, techStackId])
}

model EmployeeSoftSkill {
  
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id])
  softSkillId String
  softSkill  SoftSkill @relation(fields: [softSkillId], references: [id])
  skillsRating  String?
  
  @@id([employeeId, softSkillId])
}

model Industry {
  id       String           @id @default(uuid())
  name     String           @unique
  projects ProjectIndustry[]
}

model ProjectIndustry {
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  industryId  String
  industry    Industry @relation(fields: [industryId], references: [id], onDelete: Cascade)
  
  @@id([projectId, industryId])
}

model ProjectTechStack {
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  techStackId String
  techStack   TechStack @relation(fields: [techStackId], references: [id])
  
  @@id([projectId, techStackId])
}


model Education {

  id       String           @id @default(uuid())
  institution     String        
  qualification String
  employeeId String    @unique
  employee   Employee  @relation(fields: [employeeId], references: [id])
}

